@page "/"

@using Engine;
@using Microsoft.AspNetCore.SignalR.Client;

@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager


<div id="game_view_container">
    <div>
        <canvas tabindex="0" id="game_canvas" width="320" height="240" @ref="render_canvas" @onkeydown="handleKeyDown" @onkeyup="handleKeyUp"></canvas>
    </div>
    <div hidden="@game_started">
        <div class="centered" style="width: 100%; height: 100%; background-color: gray; opacity: 0.5;">
        </div>
        <div class="centered">
            <button @onclick="showGame">Start Game</button>
        </div>
    </div>
</div>


<div id="chat_container">

    <hr />

    <div>
        <label>
            User:
            <input @bind="user_input" />
        </label>
    </div>
    <div>
        <label>
            Message:
            <input @bind="msg_input" size="50" />
        </label>
    </div>
    <button @onclick="sendMsg" disabled="@(!isConnected)">Send</button>

    <hr />

    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</div>

<div id="audio-elements">
    <input type="checkbox" @onchange="muteClicked" checked/> <label>Mute</label>
    @* For organization purposes, this will contain the audio elements until we have a better audio system in place. *@
</div>

@code {
    protected ElementReference render_canvas;

    private bool b_is_audio_muted = true;

    private Tracer ray_tracer;
    // network
    private HubConnection chat_hub_conn;
    private HubConnection map_hub_conn;
    private List<string> messages = new List<string>();
    private string user_input;
    private string msg_input;

    private bool game_started = false;

    protected override async Task OnInitializedAsync()
    {
        ray_tracer = new Tracer();

        chat_hub_conn = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chathub")).Build();

        chat_hub_conn.On<string, string>("receiveMessage", (user, message) =>
        {
            var encoded_msg = $"{user}: {message}";
            messages.Add(encoded_msg);
            StateHasChanged();
        });

        await chat_hub_conn.StartAsync();

        map_hub_conn = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/maphub")).Build();

        map_hub_conn.On<float[]>("receiveMap", (data) =>
        {
            ray_tracer.lvl_test.map_contents = data;
        });


        await map_hub_conn.StartAsync();

        await map_hub_conn.SendAsync("getMap");

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        if (first_render)
        {
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
        }
    }

    private async void muteClicked(ChangeEventArgs event_args)
    {
        b_is_audio_muted = bool.Parse(event_args.Value.ToString());
        await JsRuntime.InvokeVoidAsync("setAllAudioMute", b_is_audio_muted);
    }

    private async void showGame()
    {
        this.game_started = true;
        StateHasChanged();

        await JsRuntime.InvokeVoidAsync("playAudio", "/audio/bgm_test.mp3");
        await JsRuntime.InvokeVoidAsync("setAllAudioMute", b_is_audio_muted);
    }

    [JSInvokable]
    public async ValueTask update(double time_stamp)
    {
        ray_tracer.updateObserver();
        ray_tracer.render();
        ray_tracer.presentScreen(JsRuntime);
    }

    [JSInvokable]
    public void handleKeyUp(KeyboardEventArgs kbe_args)
    {
        string key = kbe_args.Key;
        switch (key)
        {
            case "ArrowUp":
                ray_tracer.keyb.u = false;
                break;
            case "ArrowDown":
                ray_tracer.keyb.d = false;
                break;
            case "ArrowLeft":
                ray_tracer.keyb.l = false;
                break;
            case "ArrowRight":
                ray_tracer.keyb.r = false;
                break;
            default:
                break;
        }
    }

    [JSInvokable]
    public void handleKeyDown(KeyboardEventArgs kbe_args)
    {
        string key = kbe_args.Key;
        switch (key)
        {
            case "ArrowUp":
                ray_tracer.keyb.u = true;
                break;
            case "ArrowDown":
                ray_tracer.keyb.d = true;
                break;
            case "ArrowLeft":
                ray_tracer.keyb.l = true;
                break;
            case "ArrowRight":
                ray_tracer.keyb.r = true;
                break;
            default:
                break;
        }
    }


    // Chat Begin

    public async Task sendMsg()
    {
        await chat_hub_conn.SendAsync("sendMessage", user_input, msg_input);
    }

    public bool isConnected => chat_hub_conn.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await chat_hub_conn.DisposeAsync();
    }

    // Chat End
}
