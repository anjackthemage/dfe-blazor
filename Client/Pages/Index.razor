@page "/"

@using Engine;
@using Microsoft.AspNetCore.SignalR.Client;
@using dfe.Client.Engine.Network;
@using dfe.Shared.Render;
@using dfe.Shared.Entities;
@using dfe.Client.Engine; 

@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;


<div id="game_view_container">
    <div>
        <canvas tabindex="0" id="game_canvas" width="640" height="480"
                @ref="render_canvas"
                @onkeydown="handleKbInput"
                @onkeyup="handleKbInput"
                @onpointerdown="handlePointerDown"
                @onmousemove="handleMouseInput">
        </canvas>
    </div>
    <div hidden="@b_is_game_started">
        <div class="centered" style="width: 100%; height: 100%; background-color: gray; opacity: 0.5;">
        </div>
        <div class="centered">
            <button @onclick="showGame">Start Game</button>
        </div>
    </div>
</div>

<div id="player_list_container">
    <div>
        <span>Player List</span>
        <ul id="player_list">
            @foreach (KeyValuePair<Guid, Player> player in GameClient.game_state.local_players)
            {
                <li>>@player.Value.player_name</li>
            }
        </ul>
    </div>
</div>

<div id="chat_container">

    <hr />

    <div>
        <label>
            Name:
            <input @bind="player_name" />
        </label>
    </div>
    <div>
        <label>
            Message:
            <input @bind="msg_input" size="50" />
        </label>
    </div>
    <button @onclick="sendMsg" disabled="@(!isConnected)">Send</button>

    <hr />

    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</div>

<div id="audio-elements">
    <input type="checkbox" @onchange="muteClicked" checked /> <label>Mute</label>
    @* For organization purposes, this will contain the audio elements until we have a better audio system in place. *@
</div>

@code {

    // TODO: Need to store a cookie on client machine to save options state (mute, etc,)

    //GameClient game_client = new GameClient();

    protected ElementReference render_canvas;

    private bool b_is_audio_muted = true;

    public bool isConnected;

    Action<KeyboardEventArgs> handleKbInput;
    Action<MouseEventArgs> handleMouseInput;

    private static GameClient game_client;

    private List<string> messages = new List<string>();
    private string p_name = "Test Player";
    private string player_name {
        get { return p_name;  }
        set
        {
            p_name = value;
            GameClient.game_state.player.player_name = p_name;
            PlayerClient.player_client.player_hub_conn.SendAsync("updatePlayerData", GameClient.game_state.player);
        }
    }
    private string msg_input;

    private bool b_is_game_started = false;

    protected override async Task OnInitializedAsync()
    {


        Uri player_hub_uri = NavigationManager.ToAbsoluteUri("/playerhub");
        Uri map_hub_uri = NavigationManager.ToAbsoluteUri("/maphub");
        Uri chat_hub_uri = NavigationManager.ToAbsoluteUri("/chathub");

        game_client = new GameClient(player_hub_uri, map_hub_uri, chat_hub_uri);
        game_client.JsRuntime = JsRuntime;
        GameClient.game_state.player.player_name = p_name;



        game_client.OnPlayersUpdated += StateHasChanged;

        this.handleKbInput = game_client.handleKeyboardInput;
        this.handleMouseInput = game_client.handleMouseInput;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        if (first_render)
        {
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
        }

    }

    private async void muteClicked(ChangeEventArgs event_args)
    {
        b_is_audio_muted = bool.Parse(event_args.Value.ToString());
        await JsRuntime.InvokeVoidAsync("setAllAudioMute", b_is_audio_muted);
    }

    private async void showGame()
    {
        this.b_is_game_started = true;
        StateHasChanged();

        await JsRuntime.InvokeVoidAsync("playAudio", "/audio/bgm_test.mp3");
        await JsRuntime.InvokeVoidAsync("setAllAudioMute", b_is_audio_muted);
    }

    /// <summary>
    /// Presents the screen to the user by calling the blitScreen javascript function.
    /// </summary>
    /// <param name="js"></param>
    ///
    public void presentScreen(IJSRuntime js, PixelBuffer frameBuffer)
    {
        IJSUnmarshalledRuntime umjs = (IJSUnmarshalledRuntime)js;
        object result = umjs.InvokeUnmarshalled<byte[], int, int, object>("blitScreen", frameBuffer.pixels, frameBuffer.width, frameBuffer.height);
    }

    [JSInvokable]
    public async ValueTask update(double time_stamp)
    {
        //if (PlayerClient.b_is_player_registered)
        //{
        //    ray_tracer.updateObserver();

        //    // TODO: Move these calls to PlayerClient, don't call updateConnectedPlayers every frame.
        //    player_hub_conn.SendAsync("updateConnectedPlayers");
        //    player_hub_conn.SendAsync("updatePlayerPosition", ray_tracer.self.coord);
        //    map_client.level_map.render();

        //    foreach (KeyValuePair<Guid, Player> player_conn in player_client.connected_players)
        //    {
        //        try
        //        {
        //            player_conn.Value.render();
        //        }
        //        catch (Exception e)
        //        {
        //            Console.WriteLine("Exception: {0}", e.ToString());
        //        }
        //    }
        game_client.update(time_stamp);
        game_client.render();
        presentScreen(JsRuntime, GameClient.renderer.frame_buffer);
        //}
    }

    [JSInvokable]
    public async void handlePointerDown(PointerEventArgs pe_args)
    {
        await JsRuntime.InvokeVoidAsync("captureMouse", render_canvas, pe_args.PointerId);
    }

    // Chat Begin

    public async Task sendMsg()
    {
        //await chat_hub_conn.SendAsync("sendMessage", user_input, msg_input);
        await game_client.chat_client.sendMsg(msg_input, player_name);
    }

    public void refreshMessages(object sender, ChatMessageEventArgs che_args)
    {
        messages = che_args.Messages;
        StateHasChanged();
    }



    // Chat End

}
